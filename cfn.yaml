---
AWSTemplateFormatVersion: '2010-09-09'
Parameters:
   VpcIpv4AddressBlock:
      Description: 'IPv4 address block to assign to the VPC in CIDR format.'
      Type: String
      AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
   NatInstanceImageId:
      Description: 'AMI ID to base the NAT instance on.'
      Type: String
      AllowedPattern: '^ami-[a-z0-9]+$'
Resources:
   Vpc:
      Type: 'AWS::EC2::VPC'
      Properties:
         CidrBlock: !Ref VpcIpv4AddressBlock
   InternetGateway:
      Type: 'AWS::EC2::InternetGateway'
   InternetGatewayAttachment:
      Type: 'AWS::EC2::VPCGatewayAttachment'
      Properties:
         InternetGatewayId: !Ref InternetGateway
         VpcId: !Ref Vpc
   PublicSubnet:
      Type: 'AWS::EC2::Subnet'
      Properties:
         CidrBlock: !Select [ 1, !Cidr [ !GetAtt Vpc.CidrBlock, 2, 4 ] ]
         VpcId: !Ref Vpc
   PublicRouteTable:
      Type: 'AWS::EC2::RouteTable'
      Properties:
         VpcId: !Ref Vpc
   InternetRoute:
      Type: 'AWS::EC2::Route'
      Properties:
         RouteTableId: !Ref PublicRouteTable
         GatewayId: !Ref InternetGateway
         DestinationCidrBlock: '0.0.0.0/0'
      DependsOn: InternetGatewayAttachment
   PublicRouteTableAssociation:
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
      Properties:
         RouteTableId: !Ref PublicRouteTable
         SubnetId: !Ref PublicSubnet
   NatSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
         GroupDescription: 'For instances on private subnets to access the NAT instance.'
         VpcId: !Ref Vpc
   NatInstanceSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
         GroupDescription: 'For the NAT instance itself.'
         SecurityGroupIngress:
            -
               SourceSecurityGroupId: !GetAtt NatSecurityGroup.GroupId
               FromPort: '-1'
               ToPort: '-1'
               IpProtocol: '-1'
         VpcId: !Ref Vpc
   NatInstance:
      Type: 'AWS::EC2::Instance'
      Properties:
         ImageId: !Ref NatInstanceImageId
         InstanceType: t2.micro
         KeyName: nat
         NetworkInterfaces:
            -
               DeviceIndex: 0
               GroupSet:
                  - !GetAtt NatInstanceSecurityGroup.GroupId
               SubnetId: !Ref PublicSubnet
               AssociatePublicIpAddress: true
         SourceDestCheck: false
      DependsOn: InternetGatewayAttachment
   PrivateSubnet:
      Type: 'AWS::EC2::Subnet'
      Properties:
         CidrBlock: !Select [ 0, !Cidr [ !GetAtt Vpc.CidrBlock, 2, 4 ] ]
         VpcId: !Ref Vpc
   PrivateRouteTable:
      Type: 'AWS::EC2::RouteTable'
      Properties:
         VpcId: !Ref Vpc
   NatRoute:
      Type: 'AWS::EC2::Route'
      Properties:
         RouteTableId: !Ref PrivateRouteTable
         InstanceId: !Ref NatInstance
         DestinationCidrBlock: 0.0.0.0/0
   PrivateRouteTableAssociation:
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
      Properties:
         RouteTableId: !Ref PrivateRouteTable
         SubnetId: !Ref PrivateSubnet
   BuildRole:
      Type: 'AWS::IAM::Role'
      Properties:
         AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
               -
                  Principal:
                     Service: 'codebuild.amazonaws.com'
                  Action: 'sts:AssumeRole'
                  Effect: Allow
         Policies:
            -
               PolicyName: codebuild-vpc
               PolicyDocument:
                  Version: '2012-10-17'
                  Statement:
                     -
                        Action:
                           - 'ec2:CreateNetworkInterface'
                           - 'ec2:DeleteNetworkInterface'
                           - 'ec2:DescribeDhcpOptions'
                           - 'ec2:DescribeNetworkInterfaces'
                           - 'ec2:DescribeSecurityGroups'
                           - 'ec2:DescribeSubnets'
                           - 'ec2:DescribeVpcs'
                        Resource: '*'
                        Effect: Allow
                     -
                        Action:
                           - 'ec2:CreateNetworkInterfacePermission'
                        Resource: !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*'
                        Condition:
                           StringEquals:
                              ec2:Subnet: !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${PrivateSubnet}'
                              ec2:AuthorizedService: 'codebuild.amazonaws.com'
                        Effect: Allow
            -
               PolicyName: ecr-pull
               PolicyDocument:
                  Version: '2012-10-17'
                  Statement:
                     -
                        Action:
                           - 'ecr:GetDownloadUrlForLayer'
                           - 'ecr:BatchGetImage'
                           - 'ecr:BatchCheckLayerAvailability'
                        Resource: '*'
                        Effect: Allow
            -
               PolicyName: packer
               PolicyDocument:
                  Version: '2012-10-17'
                  Statement:
                     -
                        Action:
                           - 'ec2:DescribeImages'
                        Resource: '*'
                        Effect: Allow
                     -
                        Action:
                           - 'ec2:RunInstances'
                        Resource:
                           - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*'
                        Condition:
                           StringEquals:
                              aws:RequestTag/Packer: 'bridge'
                        Effect: Allow
                     -
                        Action:
                           - 'ec2:RunInstances'
                        Resource:
                           - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${PrivateSubnet}'
                           - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/*'
                           - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*'
                           - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:volume/*'
                           - !Sub 'arn:aws:ec2:${AWS::Region}::image/*'
                           - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:key-pair/bridge-packer'
                        Effect: Allow
                     -
                        Action:
                           - 'ec2:CreateTags'
                        Resource:
                           - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*'
                        Condition:
                           StringEquals:
                              ec2:CreateAction: 'RunInstances'
                        Effect: Allow
                     -
                        Action:
                           - 'ec2:DescribeInstances'
                        Resource:
                           - '*'
                        Effect: Allow
                     -
                        Action:
                           - 'ec2:StopInstances'
                           - 'ec2:TerminateInstances'
                        Resource:
                           - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*'
                        Condition:
                           StringEquals:
                              ec2:ResourceTag/Packer: 'bridge'
                        Effect: Allow
                     -
                        Action:
                           - 'ec2:CreateImage'
                           - 'ec2:RegisterImage'
                           - 'ec2:ModifyImageAttribute'
                        Resource:
                           - '*'
                        Effect: Allow
                     -
                        Action:
                           - 'ec2:DescribeVolumes'
                        Resource: '*'
                        Effect: Allow
   BuildLogsPolicy:
      Type: 'AWS::IAM::Policy'
      Properties:
         PolicyName: logs
         PolicyDocument:
            Version: '2012-10-17'
            Statement:
               -
                  Action:
                     - 'logs:CreateLogGroup'
                     - 'logs:CreateLogStream'
                     - 'logs:PutLogEvents'
                  Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${BuildProject}:*'
                  Effect: Allow
         Roles:
            - !Ref BuildRole
   ContainerSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
         GroupDescription: 'Bridge AMI build container.'
         VpcId: !Ref Vpc
   InstanceSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
         GroupDescription: 'Bridge AMI build instance.'
         SecurityGroupIngress:
            -
               SourceSecurityGroupId: !GetAtt ContainerSecurityGroup.GroupId
               FromPort: 22
               ToPort: 22
               IpProtocol: tcp
         VpcId: !Ref Vpc
   BuildProject:
      Type: 'AWS::CodeBuild::Project'
      Properties:
         Name: bridge-ami
         Description: 'AWS EC2 bridge AMI build'
         ServiceRole: !GetAtt BuildRole.Arn
         Source:
            Type: GITHUB
            Location: 'https://github.com/kalrish/aws-ec2-bridge.git'
            GitCloneDepth: 1
            BuildSpec: 'buildspec.yaml'
         Environment:
            Type: LINUX_CONTAINER
            ComputeType: BUILD_GENERAL1_SMALL
            Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/ami-build-env'
            PrivilegedMode: false
            EnvironmentVariables:
               -
                  Name: INSTANCE_VPC
                  Type: PLAINTEXT
                  Value: !Ref Vpc
               -
                  Name: INSTANCE_SUBNET
                  Type: PLAINTEXT
                  Value: !Ref PrivateSubnet
               -
                  Name: INSTANCE_SECURITY_GROUP
                  Type: PLAINTEXT
                  Value: !Sub '${NatSecurityGroup.GroupId},${InstanceSecurityGroup.GroupId}'
         Artifacts:
            Type: NO_ARTIFACTS
         VpcConfig:
            VpcId: !Ref Vpc
            Subnets:
               - !Ref PrivateSubnet
            SecurityGroupIds:
               - !GetAtt NatSecurityGroup.GroupId
               - !GetAtt ContainerSecurityGroup.GroupId
